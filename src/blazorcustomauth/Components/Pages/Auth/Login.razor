@page "/auth/login"

<section>
  <h2>Login page</h2>
  <div class="row">
    <div class="col-sm-5 mx-auto">
      <EditForm Model=@Model FormName="login-form"  OnValidSubmit="LoginAsync">

        <div class="mb-3">
          <label for="email" class="form-label">Email</label>
          <InputText @bind-Value="Model.Email" class="form-control" name="email" />
        </div>

        <div class="mb-3">
          <label for="password" class="form-label">Password</label>
          <InputText @bind-Value="Model.Password" class="form-control" name="password" type="password" />
        <div>info: @Model.Password</div>
        </div>
        <div class="mb-3">
          <label for="password" class="form-label">Remember Me</label>
          <InputCheckbox @bind-Value="Model.RememberMe" class="form-check-input" />
        </div>

        <div class="mb-3">
          <button type="submit" class="btn btn-primary">Login</button>
        </div>
      </EditForm>
    </div>
  </div>
</section>

@code {
  @* [SupplyParameterFromForm(FormName = "login-form")] public LoginDto Model { get; set; } = new(); *@
  public LoginDto Model { get; set; } = new();
  [CascadingParameter] public HttpContext context { get; set; } = default!;
  async Task LoginAsync()
  {
    // validate input
    await Task.Delay(200);
    LoggedUserDto loggedUser = new(1, "viktor", "victor@gmail.com");
    ClaimsIdentity identity = new(loggedUser.ToClaims(), Utilities.authScheme);
    ClaimsPrincipal principal = new(identity);

    await context.SignInAsync(Utilities.authScheme, principal, new AuthenticationProperties
      {
        IsPersistent = Model.RememberMe,
      });
  }
} ;
