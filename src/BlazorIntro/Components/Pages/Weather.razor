@page "/weather"
@attribute [StreamRendering]

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <section>
        <h3>Generic table</h3>
        <GenericTable Items="forecasts" TItem="WeatherForecast">
            <Header>
                <th>Date</th>
                <th aria-label="Temperature in Celsius">Temp. (C)</th>
                <th aria-label="Temperature in Farenheit">Temp. (F)</th>
                <th>Summary</th>
            </Header>
            <Row>
                <td>@context.Date</td>
                <td>@context.TemperatureC</td>
                <td>@context.TemperatureF</td>
                <td>@context.Summary</td>
            </Row>
            <Footer>
                <td colspan="4">Spring is in the air!</td>
            </Footer>
        </GenericTable>
    </section>

    <section>
        <h3>Generic List</h3>
        <ErrorBoundary>
            <ErrorContent>
                <div>Error Occurs</div>
            </ErrorContent>
            <ChildContent>
                <GenericList Items="forecasts" TItem="WeatherForecast">
                    <ListTemplate Context="innterTemplate">
                        <ol>@innterTemplate</ol>
                    </ListTemplate>
                    <ItemTemplate>
                        <li><span>@context.Summary</span> on <span>@context.Date.ToLongDateString()</span></li>
                    </ItemTemplate>
                </GenericList>
            </ChildContent>
        </ErrorBoundary>
    </section>
}

@code {
    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering",
"Scorching" };
        forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
            {
                Date = startDate.AddDays(index),
                TemperatureC = Random.Shared.Next(-20, 55),
                Summary = summaries[Random.Shared.Next(summaries.Length)]
            }).ToArray();
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
