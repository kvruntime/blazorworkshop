@page "/counter"
@rendermode InteractiveServer


<PageTitle>Counter</PageTitle>

<div class="alert alert-info" @onkeydown="@((KeyboardEventArgs e)=>{
    if(e.Key=="+") IncrementCount();
    else if (e.Key=="-") currentCount=currentCount-Step;
    })">
    <h1>Counter</h1>
    <input type="number" inputmode="numeric" @bind="currentCount">
    <p role="status">Current count: @currentCount</p>

    <button class="btn btn-primary" @onclick="IncrementCount">Click me</button>
    <button class="btn btn-primary" @onclick="AutoIncrement">Auto Increment</button>
    <button class="btn btn-danger" @onpointerdown="StopAutoIncrement">Stop Auto Increment</button>
</div>

@code {
    Timer timer = default!;
    private int currentCount = 0;
    [Parameter] public int Step { get; set; } = 3;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        @* timer = new(
        callback: (_) =>
        {
            this.InvokeAsync(() =>
            {
                Console.WriteLine("++");
                IncrementCount();
                StateHasChanged();
            });
        },

        state: null,
        dueTime: TimeSpan.FromSeconds(2),
        period: TimeSpan.FromSeconds(2)
        ); *@
    }
    private void IncrementCount()
    {
        currentCount += Step;
    }
    void StopAutoIncrement()
    {
        timer.Dispose();
    }
    private void AutoIncrement()
    {
        timer = new(
        callback: (_) =>
        {
            this.InvokeAsync(() =>
    {
    Console.WriteLine("++");
    IncrementCount();
    StateHasChanged();
            });
        },

        state: null,
        dueTime: TimeSpan.FromSeconds(2),
        period: TimeSpan.FromSeconds(2)
        );
    }
}
using System.Data;
