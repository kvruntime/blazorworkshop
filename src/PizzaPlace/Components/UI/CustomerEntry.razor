<div>
  <h1 class="mt-2 mb-2">@Title</h1>
  <EditForm FormName="CustomerEntry" 
  EditContext="editContext"
  OnValidSubmit="Submit">
    <fieldset>
      <div class="row mb-2">
        <label class="col-2" for="name">Name:</label>
        <InputText class="form-control col-6" @bind-Value="@Customer.Name" />
      </div>
      <div class="row mb-2">
        <div class="col-6 offset-2">
          <ValidationMessage For="@(() => Customer.Name)" />
        </div>
      </div>
      <div class="row mb-2">
        <label class="col-2" for="street">Street:</label>
        <InputText class="form-control col-6" @bind-Value="@Customer.Street" />
      </div>
      <div class="row mb-2">
        <div class="col-6 offset-2">
          <ValidationMessage For="@(() => Customer.Street)" />
        </div>
      </div>
      <div class="row mb-2">
        <label class="col-2" for="city">City:</label>
        <InputText class="form-control col-6" @bind-Value="@Customer.City" />
      </div>
      <div class="row mb-2">
        <div class="col-6 offset-2">
          <ValidationMessage For="@(() => Customer.City)" />
        </div>
      </div>
      <div class="row mb-2">
        <label class="col-2" for="city">ZipCode:</label>
        <InputText class="form-control col-6" @bind-Value="@Customer.ZipCode" />
      </div>
      <div class="row mb-2">
        <div class="col-6 offset-2">
          <ValidationMessage For="@(() => Customer.ZipCode)" />
        </div>
      </div>
      <div class="row mb-2">
        <button class="btn btn-primary" disabled="@(!formValid)">
          @SubmitTitle
        </button>
      </div>
    </fieldset>
    <DataAnnotationsValidator />
    <ValidationSummary />
  </EditForm>
</div>

@code {
  [Parameter][EditorRequired] public string Title { get; set; } = default!;
  [Parameter][EditorRequired] public required Customer Customer { get; set; }
  [Parameter] public required EventCallback<Customer> CustomerChanged { get; set; }
  [Parameter] public required EventCallback SubmitClicked { get; set; }
  [Parameter][EditorRequired]public required string SubmitTitle { get; set; }
  EditContext? editContext;
  ValidationMessageStore? validationMessage;
  protected override void OnInitialized()
  {
    base.OnInitialized();
    editContext = new(Customer);
    validationMessage = new(editContext);
    editContext.OnValidationRequested += (sender, e) => {
      validationMessage.Clear();

    };
    editContext.OnFieldChanged += (sender, e) => {
      formValid = editContext.Validate();
      StateHasChanged();
    };
  }
  bool formValid = false;

  public async Task Submit() {
    await SubmitClicked.InvokeAsync();
  }
}