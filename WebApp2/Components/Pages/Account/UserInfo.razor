@page "/Account/UserInfo"
@attribute [Authorize]
@rendermode InteractiveServer

@inject IWebHostEnvironment webHostEnv
@inject ILogger<UserInfo> logger
@inject AuthenicationUseCase authUseCase
@inject AuthenticationStateProvider stateProvider

<section>


    <AuthorizeView>
        <Authorized>
            <div class="my-3">


                @if (currentUser is not null)
                {
                    <div class="my-3 bg-slate-50 rounded-md flex flex-row justify-between items-start gap-2">
                        <div>
                            <h2 class="font-semibold text-xl">@@@currentUser.Username</h2>
                            <p>@currentUser.Email</p>
                            <div>
                                <h4>Claims</h4>
                                <ul class="list-group">
                                    @foreach (var claim in context.User.Claims)
                                    {
                                        <li class="list-group-item">@claim.Type: @claim.Value</li>
                                    }
                                </ul>
                                <p>
                                    Lorem ipsum dolor sit amet consectetur adipisicing elit. Unde officia saepe maxime non,
                                    natus alias rem error
                                    molestiae porro, illo perspiciatis accusantium. Tempore aliquam et fugiat, architecto
                                    vel praesentium eum.
                                </p>
                            </div>
                        </div>
                        <div class="h-[500px] overflow-y-hidden">
                            <img src="@currentUser.ProfileUrl" alt="@currentUser.Username" class="grayscale">
                        </div>
                    </div>
                }



            </div>

            <div>
                <h3 class="my-2 font-semibold">Update user informations</h3>
                <div class="my-3">
                    <h4>change user profile picture</h4>
                    <div class="flex flex-row  w-full gap-3 justify-between">
                        <div class="flex flex-column items-start">
                            <InputFile OnChange="LoadProfile" accept=".jpeg,.jpg,.png" class="form-control" />
                            <button class="btn btn-primary" disabled="@(!CanSave)" @onclick=SaveProfile>Save</button>
                        </div>
                        @if (!String.IsNullOrWhiteSpace(loadedFileDataUrl))
                        {
                            <div>
                                <img src="@loadedFileDataUrl" alt="uploaded file" class="w-full h-[400px] object-cover" />
                            </div>
                        }
                    </div>
                </div>
            </div>
        </Authorized>
    </AuthorizeView>
</section>

@code {
    IBrowserFile? loadedFile;
    User? currentUser;
    bool CanSave = false;
    string? loadedFileDataUrl;
    async Task LoadProfile(InputFileChangeEventArgs e)
    {
        loadedFile = e.GetMultipleFiles().FirstOrDefault();
        var bf = new byte[e.File.Size];
        await (e.File.OpenReadStream()).ReadAsync(bf);
        loadedFileDataUrl = $"data:{e.File.ContentType};base64,{Convert.ToBase64String(bf)}";
        CanSave = true;
    }

    async Task SaveProfile()
    {
        var username = (await stateProvider.GetAuthenticationStateAsync()).User?.Identity?.Name;
        if (loadedFile is null) return;
        if (String.IsNullOrWhiteSpace(username)) return;
        var uniqueName = Path.Combine("images", "users",
        $"{Guid.NewGuid().ToString()}.{Path.GetExtension(loadedFile.Name)}");
        await using FileStream fs = new(Path.Combine(webHostEnv.WebRootPath, uniqueName), FileMode.Create);
        await loadedFile.OpenReadStream().CopyToAsync(fs);
        await authUseCase.UpdateUserProfile(username, uniqueName);





    }

    protected async override Task OnInitializedAsync()
    {
        var name = (await stateProvider.GetAuthenticationStateAsync()).User?.Identity?.Name;
        if (name is not null)
            currentUser = await authUseCase.GetCurrentUser(name);
    }

}
